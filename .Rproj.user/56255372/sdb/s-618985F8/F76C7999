{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\n\n# Plotting \nlibrary(ggplot2)\nlibrary(rCharts)\nlibrary(ggvis)\n\n# Data processing libraries\nlibrary(data.table)\nlibrary(reshape2)\nlibrary(dplyr)\n\n# Required by includeMarkdown\nlibrary(markdown)\n\n# It has to loaded to plot ggplot maps on shinyapps.io\n# library(mapproj)\n# library(maps)\n\n# Data Table\ndt <- mtcars\ndt <- add_rownames(mtcars, var = \"cmod\")\ndt <- arrange(dt, cmod)\ndt$gear <- factor(mtcars$gear,levels=c(3,4,5), labels=c(\"3gears\",\"4gears\",\"5gears\")) \ndt$am <- factor(mtcars$am,levels=c(0,1), labels=c(\"Automatic\",\"Manual\")) \ndt$cyl <- factor(mtcars$cyl,levels=c(4,6,8), labels=c(\"4cyl\",\"6cyl\",\"8cyl\"))\ncars <- dt$cmod\n\nshinyServer(function(input, output, session) {\n        \n        # Define and initialize reactive values\n        values <- reactiveValues()\n        values$cars <- cars\n        \n        # Create cars checkbox\n        output$carsControls <- renderUI({\n                checkboxGroupInput(\"cars\", \"Car Models: \", cars, selected=values$cars)\n        })\n        \n        # Add observers on clear and select all buttons\n        observe({\n                if(input$clear_all == 0) return()\n                values$cars <- c()\n        })\n        \n        observe({\n                if(input$select_all == 0) return()\n                values$cars <- cars\n        })\n        \n        # Prepare data table\n        dt.cars <- reactive({\n                 subset(dt, dt$cmod %in% input$cars)\n                 })\n        \n        # Render data table and create download handler\n        output$dt.cars <- renderDataTable(\n                {dt.cars()}, options = list(bFilter = FALSE, iDisplayLength = 20))\n        \n        # Density Plot\n        output$distribGasMilage <- renderPlot({\n                dt.cars2 <- subset(dt, dt$cmod %in% input$cars)\n                # Kernel density plots for mpg\n                # grouped by number of gears (indicated by color)\n                s <- qplot(mpg, data=dt.cars2, geom=\"density\", fill=gear, alpha=I(.5), \n                      xlab=\"Miles Per Gallon\", ylab=\"Density\")\n                print(s)\n                        \n        })\n        \n        # Box Plot\n        output$BoxPlot <- renderPlot({\n                dt.cars2 <- subset(dt, dt$cmod %in% input$cars)\n                # Boxplots of mpg by number of gears \n                # observations (points) are overlayed and jittered\n                s <- qplot(gear, mpg, data=dt.cars2, geom=c(\"boxplot\", \"jitter\"), \n                      fill=gear, xlab=\"\", ylab=\"Miles per Gallon\")\n                print(s)\n                \n        })\n        \n        # Regression\n        output$Regression <- renderPlot({\n                dt.cars2 <- subset(dt, dt$cmod %in% input$cars)\n                # Separate regressions of mpg on weight for each number of cylinders\n                s <- qplot(wt, mpg, data=dt.cars2, geom=c(\"point\", \"smooth\"), \n                        method=\"lm\", formula=y~x, color=cyl, \n                        xlab=\"Weight\", ylab=\"Miles per Gallon\")\n                print(s)\n                \n        })\n})\n                \n\n",
    "created" : 1443105896961.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "322123711",
    "id" : "F76C7999",
    "lastKnownWriteTime" : 1443258113,
    "path" : "~/R/Shiny Developing Data Products/Developing Data Products Project/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}